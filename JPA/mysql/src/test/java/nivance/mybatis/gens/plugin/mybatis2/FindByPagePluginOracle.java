package nivance.mybatis.gens.plugin.mybatis2;


import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.Element;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;

public class FindByPagePluginOracle extends PluginAdapter {

	public FindByPagePluginOracle() {
        super();
	}
	

	@Override
	public boolean modelExampleClassGenerated(TopLevelClass topLevelClass,
			IntrospectedTable introspectedTable) {
		Field field = new Field();
		field.setFinal(true);
		field.setInitializationString("1L"); //$NON-NLS-1$
		field.setName("serialVersionUID"); //$NON-NLS-1$
		field.setStatic(true);
		field.setType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
		field.setVisibility(JavaVisibility.PRIVATE);
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "
				+ introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*/");
		topLevelClass.addField(field);
		
		
		field = new Field();
		field.setName("startRow");
		field.setType(FullyQualifiedJavaType.getStringInstance());
		field.setVisibility(JavaVisibility.PROTECTED);
		 /**
	     * This field was generated by MyBatis Generator.
	     * This field corresponds to the database table T_LOT_B2BCDC
	     *
	     * @generated Tue Mar 08 14:35:50 CST 2011
	     */
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*");
		DateFormat df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		field.addJavaDocLine("* @generated "+df.format(new Date()));
		field.addJavaDocLine("*/");
		topLevelClass.addField(field);
		
		field = new Field();
		field.setName("endRow");
		field.setType(FullyQualifiedJavaType.getStringInstance());
		field.setVisibility(JavaVisibility.PROTECTED);
		 /**
	     * This field was generated by MyBatis Generator.
	     * This field corresponds to the database table T_LOT_B2BCDC
	     *
	     * @generated Tue Mar 08 14:35:50 CST 2011
	     */
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		field.addJavaDocLine("* @generated "+df.format(new Date()));
		field.addJavaDocLine("*/");
		topLevelClass.addField(field);
		

		field = new Field();
		field.setName("sumCol");
		field.setType(FullyQualifiedJavaType.getStringInstance());
		field.setVisibility(JavaVisibility.PROTECTED);
		 /**
	     * This field was generated by MyBatis Generator.
	     * This field corresponds to the database table T_LOT_B2BCDC
	     *
	     * @generated Tue Mar 08 14:35:50 CST 2011
	     */
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		field.addJavaDocLine("* @generated "+df.format(new Date()));
		field.addJavaDocLine("*/");
		topLevelClass.addField(field);
		
		field = new Field();
		field.setName("groupSelClause");
		field.setType(FullyQualifiedJavaType.getStringInstance());
		field.setVisibility(JavaVisibility.PROTECTED);
		 /**
	     * This field was generated by MyBatis Generator.
	     * This field corresponds to the database table T_LOT_B2BCDC
	     *
	     * @generated Tue Mar 08 14:35:50 CST 2011
	     */
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		field.addJavaDocLine("* @generated "+df.format(new Date()));
		field.addJavaDocLine("*/");
		topLevelClass.addField(field);
		
		field = new Field();
		field.setName("groupByClause");
		field.setType(FullyQualifiedJavaType.getStringInstance());
		field.setVisibility(JavaVisibility.PROTECTED);
		 /**
	     * This field was generated by MyBatis Generator.
	     * This field corresponds to the database table T_LOT_B2BCDC
	     *
	     * @generated Tue Mar 08 14:35:50 CST 2011
	     */
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		field.addJavaDocLine("* @generated "+df.format(new Date()));
		field.addJavaDocLine("*/");
		topLevelClass.addField(field);
		
		field = new Field();
		field.setName("andCriteria");
		FullyQualifiedJavaType listtype = FullyQualifiedJavaType.getNewListInstance();
		listtype.addTypeArgument(new FullyQualifiedJavaType("Criteria"));
		field.setType(listtype);
		field.setVisibility(JavaVisibility.PROTECTED);
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		field.addJavaDocLine("* @generated "+df.format(new Date()));
		field.addJavaDocLine("*/");
		topLevelClass.addField(field);
		
		Method method = new Method();
		method.setName("setStartRow");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(FullyQualifiedJavaType.getStringInstance(), "startRow"));
		method.setReturnType(null);
		method.addBodyLine(" this.startRow = startRow;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("getStartRow");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(FullyQualifiedJavaType.getStringInstance());
		method.addBodyLine("  return startRow;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("setEndRow");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(FullyQualifiedJavaType.getStringInstance(), "endRow"));
		method.setReturnType(null);
		method.addBodyLine(" this.endRow = endRow;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("getEndRow");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(FullyQualifiedJavaType.getStringInstance());
		method.addBodyLine("  return endRow;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		

		method = new Method();
		method.setName("setSumCol");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(FullyQualifiedJavaType.getStringInstance(), "sumCol"));
		method.setReturnType(null);
		method.addBodyLine(" this.sumCol = sumCol;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("getSumCol");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(FullyQualifiedJavaType.getStringInstance());
		method.addBodyLine("  return sumCol;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("setGroupSelClause");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(FullyQualifiedJavaType.getStringInstance(), "groupSelClause"));
		method.setReturnType(null);
		method.addBodyLine(" this.groupSelClause = groupSelClause;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("getGroupSelClause");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(FullyQualifiedJavaType.getStringInstance());
		method.addBodyLine("  return groupSelClause;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("setGroupByClause");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(FullyQualifiedJavaType.getStringInstance(), "groupByClause"));
		method.setReturnType(null);
		method.addBodyLine(" this.groupByClause = groupByClause;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("getGroupByClause");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(FullyQualifiedJavaType.getStringInstance());
		method.addBodyLine("  return groupByClause;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);

		method = new Method();
		method.setName("getAndCriteria");
		method.setVisibility(JavaVisibility.PUBLIC);
		listtype = FullyQualifiedJavaType.getNewListInstance();
		listtype.addTypeArgument(new FullyQualifiedJavaType("Criteria"));
		method.setReturnType(listtype);
		method.addBodyLine("  return andCriteria;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);

		method = new Method();
		method.setName("and");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(new FullyQualifiedJavaType("Criteria"));
		method.addBodyLine("  Criteria criteria = createCriteriaInternal();");
		method.addBodyLine("  andCriteria.add(criteria);");
		method.addBodyLine("  return criteria;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		List<Method> methods = topLevelClass.getMethods();
		for(Method mod:methods){
			if(mod.getName().equals("clear")){
				mod.addBodyLine("this.startRow=null;");
				mod.addBodyLine("this.endRow=null;");
				mod.addBodyLine("this.sumCol=null;");
				mod.addBodyLine("this.groupSelClause=null;");
				mod.addBodyLine("this.groupByClause=null;");
				mod.addBodyLine("andCriteria.clear();");
			}
			String examplename = introspectedTable.getExampleType().substring(introspectedTable.getExampleType().lastIndexOf(".")+1);
			if(mod.getName().equals(examplename)){
				List<Parameter> parameters = mod.getParameters();
				if(parameters!=null && parameters.size()>0){
					mod.addBodyLine("this.andCriteria = example.andCriteria;");
				}else{
					mod.addBodyLine("andCriteria = new ArrayList<Criteria>();");
				}
			}
		}
		
		List<InnerClass> inclasses = topLevelClass.getInnerClasses();
		for(InnerClass inclass:inclasses){
//			System.out.println(inclass.getType().getShortName());
			if(inclass.getType().getShortName().indexOf("GeneratedCriteria")!=-1){
				List<Method> inmethods = inclass.getMethods();
				for(Method inmethod:inmethods){
					inmethod.setVisibility(JavaVisibility.PUBLIC);
					if(inmethod.getName().indexOf("and")!=-1){
						List<Parameter> inparams = inmethod.getParameters();
						for(Parameter inparam:inparams){
							if(inmethod.getReturnType()!=null){
								inmethod.addBodyLine(0, "if("+inparam.getName()+"==null){return (Criteria)this;}");
							}else{
								inmethod.addBodyLine(0, "if("+inparam.getName()+"==null){return;}");
							}
						}
					}
				}
			}
		}
		
		// TODO
//		topLevelClass.addSuperInterface(new FullyQualifiedJavaType(
//				"Serializable"));
//		topLevelClass.addImportedType("java.io.Serializable");
		return true;
	}

	@Override
	public boolean clientGenerated(Interface interfaze,
			TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
	
        Method method = new Method();
        method.setName("findByPage");
        method.setVisibility(JavaVisibility.PUBLIC);
        FullyQualifiedJavaType exampletype = new FullyQualifiedJavaType(introspectedTable.getExampleType());
        method.addParameter(new Parameter(exampletype, "example")); //$NON-NLS-1$
        method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "startRow"));
        method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "endRow"));
        FullyQualifiedJavaType fqjt = FullyQualifiedJavaType.getNewListInstance();
        fqjt.addTypeArgument(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
        method.setReturnType(fqjt);
     
		method.addBodyLine("return this.findByPage(example, startRow, endRow, null);");
	
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		DateFormat df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		
		topLevelClass.addMethod(method);
		
		/*
		 * public List<Time> findByPage(Time item,Integer startRow,Integer endRow, String orderByClause){
			example.setStartRow(startRow);
        	example.setEndRow(endRow);
        	
        	return getSqlMapClientTemplate().queryForList("T_LOT_B2BCDC.findByPage",example);

			}
		 */
		method = new Method();
		method.setName("findByPage");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(exampletype, "example")); //$NON-NLS-1$
	    method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "startRow"));
	    method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "endRow"));
	    method.addParameter(new Parameter(FullyQualifiedJavaType.getStringInstance(), "orderByClause"));
	    method.setReturnType(fqjt);
	    method.addBodyLine("	example.setStartRow(String.valueOf(startRow));");
	    method.addBodyLine("	example.setEndRow(String.valueOf(endRow));");
	    method.addBodyLine("	example.setOrderByClause(orderByClause);");
	    method.addBodyLine("	return getSqlMapClientTemplate().queryForList(\""+introspectedTable.getFullyQualifiedTableNameAtRuntime()+".findByPage\",example);");
	   
	    method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		
		topLevelClass.addMethod(method);
		
		topLevelClass.addImportedType(new FullyQualifiedJavaType("javax.annotation.PostConstruct"));
		topLevelClass.addImportedType(new FullyQualifiedJavaType("com.ibatis.sqlmap.client.SqlMapClient"));

		String recordname = introspectedTable.getBaseRecordType();
		recordname = recordname.substring(recordname.lastIndexOf(".")+1);
		method = new Method();
		method.setName("batchInsertSelective");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(null);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
	    fqjt.addTypeArgument(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
		Parameter param = new Parameter(fqjt, "list");
		param.addAnnotation("final");
		method.addParameter(param);
		method.addBodyLine("getSqlMapClientTemplate().execute(new SqlMapClientCallback(){");
		method.addBodyLine("	public Object doInSqlMapClient(SqlMapExecutor executor)");
		method.addBodyLine("		throws SQLException {");
		method.addBodyLine("		executor.startBatch();");
		method.addBodyLine("		for("+recordname+" item : list){");
		method.addBodyLine("			executor.insert(\""+introspectedTable.getFullyQualifiedTableNameAtRuntime()+".insertSelective\",item);");
		method.addBodyLine("		}");
		method.addBodyLine("		executor.executeBatch();");
		method.addBodyLine("		return null;");
		method.addBodyLine("	}");
		method.addBodyLine("});");
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		topLevelClass.addMethod(method);
		
		// public int sumByExample(CustomerExample example){
    	//Integer sum = (Integer)  getSqlMapClientTemplate().queryForObject("T_LOT_CUSTOMER.sumByExample", example);
        //return sum;
    	//}
		method = new Method();
		method.setName("sumByExample");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(FullyQualifiedJavaType.getIntInstance());
		method.addParameter(new Parameter(exampletype, "example"));
		method.addBodyLine("	Integer sum = (Integer)  getSqlMapClientTemplate().queryForObject(\""+introspectedTable.getFullyQualifiedTableNameAtRuntime()+".sumByExample\", example);");
		method.addBodyLine("	return sum;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("groupByExample");
		method.setVisibility(JavaVisibility.PUBLIC);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
		fqjt.addTypeArgument(new FullyQualifiedJavaType(HashMap.class.getName()));
		method.setReturnType(fqjt);
		method.addParameter(new Parameter(exampletype, "example"));
		method.addBodyLine("	return getSqlMapClientTemplate().queryForList(\""+introspectedTable.getFullyQualifiedTableNameAtRuntime()+".groupByExample\",example);");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		topLevelClass.addMethod(method);
		
		//批量更新
	    recordname = introspectedTable.getBaseRecordType();
		recordname = recordname.substring(recordname.lastIndexOf(".")+1);
		method = new Method();
		method.setName("batchUpdateSelective");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(null);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
	    fqjt.addTypeArgument(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
		param = new Parameter(fqjt, "list");
		param.addAnnotation("final");
		method.addParameter(param);
		method.addBodyLine("getSqlMapClientTemplate().execute(new SqlMapClientCallback(){");
		method.addBodyLine("	public Object doInSqlMapClient(SqlMapExecutor executor)");
		method.addBodyLine("		throws SQLException {");
		method.addBodyLine("		executor.startBatch();");
		method.addBodyLine("		 for("+recordname+" item : list){");
		method.addBodyLine("			executor.update(\""+introspectedTable.getFullyQualifiedTableNameAtRuntime()+".updateByPrimaryKeySelective\",item);");
		method.addBodyLine("		}");
		method.addBodyLine("		executor.executeBatch();");
		method.addBodyLine("		return null;");
		method.addBodyLine("	}");
		method.addBodyLine("});");
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		topLevelClass.addMethod(method);
		 
		//批量删除
	    recordname = introspectedTable.getBaseRecordType();
		recordname = recordname.substring(recordname.lastIndexOf(".")+1);
		method = new Method();
		method.setName("batchDeleteSelective");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(null);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
	    fqjt.addTypeArgument(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
		param = new Parameter(fqjt, "list");
		param.addAnnotation("final");
		method.addParameter(param);
		method.addBodyLine("getSqlMapClientTemplate().execute(new SqlMapClientCallback(){");
		method.addBodyLine("	public Object doInSqlMapClient(SqlMapExecutor executor)");
		method.addBodyLine("		throws SQLException {");
		method.addBodyLine("		executor.startBatch();");
		method.addBodyLine("		 for("+recordname+" item : list){");
		method.addBodyLine("			executor.delete(\""+introspectedTable.getFullyQualifiedTableNameAtRuntime()+".deleteByPrimaryKey\",item);");
		method.addBodyLine("		}");
		method.addBodyLine("		executor.executeBatch();");
		method.addBodyLine("		return null;");
		method.addBodyLine("	}");
		method.addBodyLine("});");
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		topLevelClass.addMethod(method);
		 
		//------
		//add sqlclient
		method = new Method();
		method.setName("initSqlMapClient");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(null);
		method.addBodyLine("    super.setSqlMapClient(sqlMapClient);");
		method.addAnnotation("@PostConstruct");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		topLevelClass.addMethod(method);
		
		//-------- add dao
		
		topLevelClass.addAnnotation("@Component("+topLevelClass.getType().getShortName()+".BEAN_NAME)");
		
		//--
		Field sfield = new Field();
		sfield.setName("BEAN_NAME=\""+StringUtils.uncapitalize(topLevelClass.getType().getShortName()+"\""));
		sfield.setFinal(true);
		sfield.setStatic(true);
		sfield.setType(FullyQualifiedJavaType.getStringInstance());
		sfield.setVisibility(JavaVisibility.PUBLIC);
		topLevelClass.addField(sfield);
		
		Field field = new Field();
		field.setName("sqlMapClient");
		FullyQualifiedJavaType newtype=new FullyQualifiedJavaType("com.ibatis.sqlmap.client.SqlMapClient");
		field.setType(newtype);
		field.setVisibility(JavaVisibility.PRIVATE);
		 /**
	     * This field was generated by MyBatis Generator.
	     * This field corresponds to the database table T_LOT_B2BCDC
	     *
	     * @generated Tue Mar 08 14:35:50 CST 2011
	     */
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*");
		field.addJavaDocLine("* @generated "+df.format(new Date()));
		field.addJavaDocLine("*/");
		field.addAnnotation("@javax.annotation.Resource(name = \"sqlMapClient\")");
		topLevelClass.addField(field);
		
		
		method = new Method();
		method.setName("selectByExampleAnd");
		method.setVisibility(JavaVisibility.PUBLIC);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
	    fqjt.addTypeArgument(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
	    method.setReturnType(fqjt);
		method.addParameter(new Parameter(new FullyQualifiedJavaType(introspectedTable.getExampleType()), "example"));
		method.addBodyLine("List<"+recordname+"> list = getSqlMapClientTemplate().queryForList(\""+introspectedTable.getFullyQualifiedTableNameAtRuntime()+".selectByExampleAnd\", example);");
		method.addBodyLine("return list;");
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		topLevelClass.addMethod(method);
			
		Set<FullyQualifiedJavaType> its=new HashSet<FullyQualifiedJavaType>();
		its.add(new FullyQualifiedJavaType("com.ibatis.sqlmap.client.SqlMapExecutor"));
		its.add(new FullyQualifiedJavaType("java.sql.SQLException"));
		its.add(new FullyQualifiedJavaType("org.springframework.orm.ibatis.SqlMapClientCallback"));
		its.add(new FullyQualifiedJavaType("java.util.HashMap"));
		its.add(new FullyQualifiedJavaType("org.springframework.stereotype.Component"));

		topLevelClass.addImportedTypes(its);
        method = new Method();
		method.setName("findByPage");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(exampletype, "example")); //$NON-NLS-1$
		method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "startRow"));
		method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "endRow"));
		FullyQualifiedJavaType type = new FullyQualifiedJavaType(introspectedTable.getBaseRecordType());
		FullyQualifiedJavaType listype = FullyQualifiedJavaType.getNewListInstance();
		listype.addTypeArgument(type);
		method.setReturnType(listype);
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df =  new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		
		interfaze.addMethod(method);
		
		method = new Method();
		method.setName("findByPage");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(exampletype, "example")); //$NON-NLS-1$
		method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "startRow"));
		method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "endRow"));
		method.addParameter(new Parameter(FullyQualifiedJavaType.getStringInstance(), "orderByClause"));
		type = new FullyQualifiedJavaType(introspectedTable.getBaseRecordType());
		listype = FullyQualifiedJavaType.getNewListInstance();
		listype.addTypeArgument(type);
		method.setReturnType(listype);
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df =  new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		interfaze.addMethod(method);
		
		method = new Method();
		method.setName("batchInsertSelective");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(null);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
	    fqjt.addTypeArgument(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
		param = new Parameter(fqjt, "list");
		param.addAnnotation("final");
		method.addParameter(param);
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		interfaze.addMethod(method);
		
		//public int sumByExample(CustomerExample example){
		method = new Method();
		method.setName("sumByExample");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(FullyQualifiedJavaType.getIntInstance());
		method.addParameter(new Parameter(exampletype, "example"));
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		interfaze.addMethod(method);
		
		
		method = new Method();
		method.setName("groupByExample");
		method.setVisibility(JavaVisibility.PUBLIC);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
		fqjt.addTypeArgument(new FullyQualifiedJavaType(HashMap.class.getName()));
		method.setReturnType(fqjt);
		method.addParameter(new Parameter(exampletype, "example"));
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		interfaze.addMethod(method);
		
		method = new Method();
		method.setName("batchUpdateSelective");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(null);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
	    fqjt.addTypeArgument(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
		param = new Parameter(fqjt, "list");
		param.addAnnotation("final");
		method.addParameter(param);
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		
		interfaze.addMethod(method);
		
		method = new Method();
		method.setName("batchDeleteSelective");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(null);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
	    fqjt.addTypeArgument(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
		param = new Parameter(fqjt, "list");
		param.addAnnotation("final");
		method.addParameter(param);
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		
		interfaze.addMethod(method);
		
		method = new Method();
		method.setName("selectByExampleAnd");
		method.setVisibility(JavaVisibility.PUBLIC);
		fqjt = FullyQualifiedJavaType.getNewListInstance();
	    fqjt.addTypeArgument(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
	    method.setReturnType(fqjt);
		method.addParameter(new Parameter(new FullyQualifiedJavaType(introspectedTable.getExampleType()), "example"));
		
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
			
		interfaze.addMethod(method);
		

		method = new Method();
		method.setName("initSqlMapClient");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(null);
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		interfaze.addMethod(method);


		interfaze.addImportedType(new FullyQualifiedJavaType(HashMap.class.getName()));
//		interfaze.addAnnotation("@Repository"); 
//		interfaze.addImportedType(new FullyQualifiedJavaType("org.springframework.stereotype.Repository;"));
		String pojo = introspectedTable.getBaseRecordType();
		String example = introspectedTable.getExampleType();
		String key = "String";
		if(introspectedTable.getPrimaryKeyColumns().size()>1){
			key = introspectedTable.getPrimaryKeyType();
		}else if(introspectedTable.getPrimaryKeyColumns().size()==1){
			key = introspectedTable.getPrimaryKeyColumns().get(0).getFullyQualifiedJavaType().getShortName();
		}
		interfaze.addSuperInterface(new FullyQualifiedJavaType("SqlDaoSupport<"+ pojo + ","+example+","+key+">"));
		interfaze.addImportedType(new FullyQualifiedJavaType(
				"nivance.dbpapi.iface.SqlDaoSupport"));
		interfaze.addImportedType(new FullyQualifiedJavaType(
				"nivance.dbpapi.exception.JPAException"));
		List<Method> methods = interfaze.getMethods();
		for (Method m : methods) {
			m.addException(new FullyQualifiedJavaType("JPAException"));
		}
		
		topLevelClass.addImportedType(new FullyQualifiedJavaType(
				"nivance.dbpapi.exception.JPAException"));
		methods = topLevelClass.getMethods();
		for (Method m : methods) {
			m.addException(new FullyQualifiedJavaType("JPAException"));
		}
		return true;
	}

	@Override
	public boolean sqlMapDocumentGenerated(Document document,
			IntrospectedTable introspectedTable) {
		// TODO Auto-generated method stub
		/*
		 * <select id="findByPage" resultMap="Keno_WagerResult" parameterClass="map">
		<![CDATA[ 
	 		select c.* from (select rownum as num,b.* from(select a.* from T_LOT_3RD_KENO_WAGER  a
	 	]]>	
	 	<include refid="Keno_Wager_Find_Where_Clause" />
		<isNotNull property="orderByClause" >
        	order by $orderByClause$
        </isNotNull>
        <isNull property="orderByClause" >
        	order by a.seq asc
        </isNull>
		<![CDATA[ 
			)b) c
			where c.num > #startRow:INTEGER# and c.num <= #endRow:INTEGER#
	 	]]>
	</select>
		 */
		String pkname = "";
		List<IntrospectedColumn> pklist = introspectedTable.getPrimaryKeyColumns();
		for(IntrospectedColumn pkcol:pklist){
			pkname = pkcol.getActualColumnName();
			break;
		}
		if(pkname.length()<=0){
			pklist = introspectedTable.getNonBLOBColumns();
			for(IntrospectedColumn pkcol:pklist){
				pkname = pkcol.getActualColumnName();
				break;
			}
		}
		
		DateFormat df =  new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		//oracle
		String template = "<select id=\"findByPage\" resultMap=\"FINDRESULT\" parameterClass=\""+introspectedTable.getExampleType()+"\" remapResults=\"true\" >\r\n" +
						  "	<!--\r\n" +
	      				  "	WARNING - @generated\r\n" +
	      				  "	This element is automatically generated by MyBatis Generator, do not modify.\r\n" +
	      				  "	This element was generated on "+df.format(new Date())+".\r\n" +
	      				  "	-->\r\n" +
						  "	<![CDATA[ \r\n" + 
						  "	select c.* from (select rownum as num,b.* from(select a.* from FINDTABLE a \r\n" +
						  "	]]>\r\n" +
						  "	<include refid=\"FINDWHERE\" />\r\n" +
						  "	<isNotNull property=\"orderByClause\" >\r\n" +
						  "		order by $orderByClause$\r\n" +
						  "	</isNotNull>\r\n" +
						  "	<isNull property=\"orderByClause\" >\r\n" +
						  "		order by a."+pkname+" asc\r\n" +
						  "	</isNull>\r\n" +
						  "	<![CDATA[ \r\n" +
						  "		)b) c\r\n" +
						  "		where c.num > #startRow:INTEGER# and c.num <= #endRow:INTEGER#\r\n" +
						  "	]]>\r\n" +
						  "</select>\r\n";
		//mysqltemplate
//		String template = "<![CDATA[ select a.* from FINDTABLE ]]>" +
//						  "<include refid=\"FINDWHERE\" />" +
//						  "<isNotNull property=\"orderByClause\" >" +
//						  "order by $orderByClause$" +
//						  "</isNotNull>" +
//						  "<isNull property=\"orderByClause\" >" +
//						  "order by a."+pkname+" asc"+
//						  "	</isNull>" +
//						  "<![CDATA[ limit #startRow# , #endRow# ]]>";
		String resultmap = "";
		String tablename = "";
		String whereclause = "";
		String xmlstr = document.getFormattedContent();
		Pattern patt = Pattern.compile("<resultMap\\s*id=\"(.*)\"");
		Matcher m = patt.matcher(xmlstr);
		if(m.matches()){
			resultmap = m.group(1);
		}else{
			resultmap = "BaseResultMap";
		}
		XmlElement rootelement = document.getRootElement();
		List<Attribute> attrs = rootelement.getAttributes();
		for(Attribute attr:attrs){
			if(attr.getName().equals("namespace")){
				tablename = attr.getValue();
			}
		}
		
		patt = Pattern.compile("<sql\\s*id=\"(.*)\"");
		m = patt.matcher(xmlstr);
		if(m.matches()){
			whereclause = m.group(1);
			if(whereclause.indexOf(".")==-1){
				whereclause = tablename+"."+whereclause;
			}
		}else{
			whereclause = tablename+".Example_Where_Clause";
		}
		
		template = template.replaceAll("FINDRESULT", resultmap).replaceAll("FINDTABLE", tablename).replaceAll("FINDWHERE", whereclause);
		Element findbypage = new TextElement(template);
		
		String pageheadertemplate = "<sql id=\"oracle_Pagination_Head\" >\r\n"+
									"	<dynamic >\r\n" +
									"		<isNotEmpty property=\"startRow\" >\r\n" +
									"		<isNotEmpty property=\"endRow\" >\r\n" +
									"			<![CDATA[select * from ( select row_.*, rownum rownum_ from ( ]]>\r\n" +
									"		</isNotEmpty>\r\n" +
									"		</isNotEmpty>\r\n" +
									"	</dynamic>\r\n" +
									"  </sql>\r\n";
		String pagetailtemplate = "<sql id=\"oracle_Pagination_Tail\" >\r\n" +
								  "	<dynamic >\r\n" +
								  "		<isNotEmpty property=\"startRow\" >\r\n" +
								  "		<isNotEmpty property=\"endRow\" >\r\n" +
								  "			<![CDATA[) row_ where rownum <= #endRow# ) where rownum_ > #startRow#]]>\r\n" +
								  "		</isNotEmpty>\r\n" +
								  "		</isNotEmpty>\r\n" +
								  "	</dynamic>\r\n" +
								  "  </sql>\r\n";
		
		TextElement pageheader = new TextElement(pageheadertemplate);
		rootelement.addElement(3, pageheader);
		TextElement pagetail = new TextElement(pagetailtemplate);
		rootelement.addElement(3, pagetail);
		
		
		String sumbyexamtemplate = "<select id=\"sumByExample\" resultClass=\"java.lang.Integer\" parameterClass=\""+introspectedTable.getExampleType()+"\"  remapResults=\"true\">\r\n" +
								   "	<!--\r\n" +
								   "	WARNING - @generated\r\n" +
								   "	This element is automatically generated by MyBatis Generator, do not modify.\r\n" +
								   "	This element was generated on "+df.format(new Date())+".\r\n" +
								   "	-->\r\n" +
								   "	select\r\n" +
								   "		<isNotNull property=\"sumCol\" >\r\n" +
								   "			(case when sum($sumCol$) is null then 0 else sum($sumCol$) end)\r\n" +
								   "		</isNotNull>\r\n" +
								   "		<isNull property=\"sumCol\" >\r\n" +
								   "			sum(1)\r\n" +
								   "		</isNull>\r\n" +
								   "	from "+tablename +"\r\n" +
								   "	<isParameterPresent >\r\n" +
								   "	<include refid=\""+whereclause+"\" />\r\n" +
								   "	</isParameterPresent>\r\n" +
								   "</select>\r\n";
		TextElement sumbyexample = new TextElement(sumbyexamtemplate);
		
		String groupbyexampletemplate = "<select id=\"groupByExample\" resultClass=\"java.util.HashMap\" parameterClass=\""+introspectedTable.getExampleType()+"\"  remapResults=\"true\">\r\n" +
										"	<!--\r\n" +
										"	WARNING - @generated\r\n" +
										"	This element is automatically generated by MyBatis Generator, do not modify.\r\n" +
										"	This element was generated on "+df.format(new Date())+".\r\n" +
										"	-->\r\n" +
										"	select\r\n" +
										"		<isNotNull property=\"groupSelClause\" >\r\n" +
										"			$groupSelClause$\r\n" +
										"		</isNotNull>\r\n" +
										"	from "+tablename+"\r\n" +
										"	<isParameterPresent >\r\n" +
										"	<include refid=\""+whereclause+"\" />\r\n" +
										"	</isParameterPresent>\r\n" +
										"	<isNotNull property=\"groupByClause\" >\r\n" +
										"		$groupByClause$\r\n" +
										"	</isNotNull>\r\n" +
										"	<isNotNull property=\"orderByClause\" >\r\n" +
										"		order by $orderByClause$\r\n" +
										"	</isNotNull>\r\n" +
										"</select>\r\n";
		TextElement groupbyexample = new TextElement(groupbyexampletemplate);
		
		String selectbyexampleandtemplate = "<sql id=\"Example_AND_Where_Clause\" >\r\n" +
											"	<!--\r\n" +
											"	WARNING - @generated\r\n" +
											"	This element is automatically generated by MyBatis Generator, do not modify.\r\n" +
											"	This element was generated on Wed Mar 23 17:29:16 CST 2011.\r\n" +
											"	-->\r\n" +
											"	<iterate property=\"andCriteria\" conjunction=\"and\" prepend=\"where\" removeFirstPrepend=\"iterate\" >\r\n" +
											"		<isEqual property=\"andCriteria[].valid\" compareValue=\"true\" >\r\n" +
											"			<iterate prepend=\"and\" property=\"andCriteria[].criteriaWithoutValue\" conjunction=\"and\" >\r\n" +
											"				$andCriteria[].criteriaWithoutValue[]$\r\n" +
											"			</iterate>\r\n" +
											"			<iterate prepend=\"and\" property=\"andCriteria[].criteriaWithSingleValue\" conjunction=\"and\" >\r\n" +
											"				$andCriteria[].criteriaWithSingleValue[].condition$ #andCriteria[].criteriaWithSingleValue[].value#\r\n" +
											"			</iterate>\r\n" +
											"			<iterate prepend=\"and\" property=\"andCriteria[].criteriaWithListValue\" conjunction=\"and\" >\r\n" +
											"				$andCriteria[].criteriaWithListValue[].condition$\r\n" +
											"				<iterate property=\"andCriteria[].criteriaWithListValue[].values\" open=\"(\" close=\")\" conjunction=\",\" >\r\n" +
											"					#andCriteria[].criteriaWithListValue[].values[]#\r\n" +
											"				</iterate>\r\n" +
											"			</iterate>\r\n" +
											"			<iterate prepend=\"and\" property=\"andCriteria[].criteriaWithBetweenValue\" conjunction=\"and\" >\r\n" +
											"				$andCriteria[].criteriaWithBetweenValue[].condition$\r\n" +
											"				#andCriteria[].criteriaWithBetweenValue[].values[0]# and\r\n" +
											"				#andCriteria[].criteriaWithBetweenValue[].values[1]#\r\n" +
											"			</iterate>\r\n" + 
											"		</isEqual>\r\n" +
											"	</iterate>\r\n" +
											"</sql>\r\n";
		
		TextElement selectbyexampleand = new TextElement(selectbyexampleandtemplate);
		rootelement.addElement(2, selectbyexampleand);
		
		String selectbyexamsql = "<select id=\"selectByExampleAnd\" resultMap=\"BaseResultMap\" parameterClass=\""+introspectedTable.getExampleType()+"\"  remapResults=\"true\">\r\n" +
	    						 "	<!--\r\n" +
	    						 "	WARNING - @generated\r\n" +
	    						 "	This element is automatically generated by MyBatis Generator, do not modify.\r\n" +
	    						 "	This element was generated on Fri Mar 25 10:01:02 CST 2011.\r\n" +
	    						 "	-->\r\n" +	
	    						 "	<include refid=\"oracle_Pagination_Head\" />\r\n" +
	    						 "	select\r\n" +
	    						 "	<isParameterPresent >\r\n" +
	    						 "		<isEqual property=\"distinct\" compareValue=\"true\" >\r\n" +
	    						 "			distinct\r\n" +
	    						 "		</isEqual>\r\n" +
	    						 "	</isParameterPresent>\r\n" +
	    						 "	<include refid=\""+tablename+".Base_Column_List\" />\r\n"+
	    						 "	from "+tablename+"\r\n" +
	    						 "	<isParameterPresent >\r\n" +
	    						 "		<include refid=\""+tablename+".Example_AND_Where_Clause\" />\r\n" +
	    						 "		<isNotNull property=\"orderByClause\" >\r\n" +
	    						 "			order by $orderByClause$\r\n" +
	    						 "		</isNotNull>\r\n" +
	    						 "	</isParameterPresent>\r\n" +
	    						 "	<include refid=\"oracle_Pagination_Tail\" />\r\n" +
	    						 "</select>\r\n";
		TextElement selectbyexamsqlelement = new TextElement(selectbyexamsql);
		if(mapput.get(tablename)==null){
			rootelement.addElement(findbypage);
			rootelement.addElement(sumbyexample);
			rootelement.addElement(groupbyexample);
			rootelement.addElement(selectbyexamsqlelement);
			mapput.put(tablename, "ok");
		}
		/*

*/
		return true;
	}
	HashMap<String, String> mapput=new HashMap<String, String>();

	@Override
	public boolean sqlMapSelectByExampleWithoutBLOBsElementGenerated(
			XmlElement element, IntrospectedTable introspectedTable) {
		
		int size = 0;
		if(element.getElements()!=null){
			size = element.getElements().size();
		}
		if(size <= 0){
			return true;
		}
		
		//oracle
		XmlElement pageheader = new XmlElement("include");
		pageheader.addAttribute(new Attribute("refid", "oracle_Pagination_Head"));
		element.addElement(5, pageheader);
		
		XmlElement pagetail = new XmlElement("include");
		pagetail.addAttribute(new Attribute("refid", "oracle_Pagination_Tail"));
		element.addElement(size+1, pagetail);
		
		//mysql add
		//element.addElement(size+1, new TextElement("<![CDATA[ limit #startRow# , #endRow# ]]>"));
		return true;
	}



	@Override
	public boolean validate(List<String> arg0) {
		System.out.println("validate:"+arg0);
		return true;
	}
}
